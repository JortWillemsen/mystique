"use strict";
exports.id = "node_modules_wdio_logger_build_web_js";
exports.ids = ["node_modules_wdio_logger_build_web_js"];
exports.modules = {

/***/ "./node_modules/@wdio/logger/build/web.js":
/*!************************************************!*\
  !*** ./node_modules/@wdio/logger/build/web.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getLogger)
/* harmony export */ });
/* istanbul ignore file */
const LOG_METHODS = ['error', 'warn', 'info', 'debug', 'trace', 'silent'];
function getLogger(component) {
    return LOG_METHODS.reduce((acc, cur) => {
        const prop = cur;
        // check if the method is available on console (web doesn't have
        // 'silent', for example) before adding to acc
        // eslint-disable-next-line no-console
        if (console[prop]) {
            // eslint-disable-next-line no-console
            // @ts-ignore
            acc[prop] = console[prop].bind(console, `${component}:`);
        }
        return acc;
    }, {});
}
// logging interface expects a 'setLevel' method
getLogger.setLevel = () => { };
getLogger.setLogLevelsConfig = () => { };
getLogger.waitForBuffer = () => { };
getLogger.clearLogger = () => { };


/***/ })

};
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX3dkaW9fbG9nZ2VyX2J1aWxkX3dlYl9qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxVQUFVO0FBQ2pFO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0aXF1ZS1jbGkvLi9ub2RlX21vZHVsZXMvQHdkaW8vbG9nZ2VyL2J1aWxkL3dlYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuY29uc3QgTE9HX01FVEhPRFMgPSBbJ2Vycm9yJywgJ3dhcm4nLCAnaW5mbycsICdkZWJ1ZycsICd0cmFjZScsICdzaWxlbnQnXTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExvZ2dlcihjb21wb25lbnQpIHtcbiAgICByZXR1cm4gTE9HX01FVEhPRFMucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgICBjb25zdCBwcm9wID0gY3VyO1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbiBjb25zb2xlICh3ZWIgZG9lc24ndCBoYXZlXG4gICAgICAgIC8vICdzaWxlbnQnLCBmb3IgZXhhbXBsZSkgYmVmb3JlIGFkZGluZyB0byBhY2NcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgaWYgKGNvbnNvbGVbcHJvcF0pIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBhY2NbcHJvcF0gPSBjb25zb2xlW3Byb3BdLmJpbmQoY29uc29sZSwgYCR7Y29tcG9uZW50fTpgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn1cbi8vIGxvZ2dpbmcgaW50ZXJmYWNlIGV4cGVjdHMgYSAnc2V0TGV2ZWwnIG1ldGhvZFxuZ2V0TG9nZ2VyLnNldExldmVsID0gKCkgPT4geyB9O1xuZ2V0TG9nZ2VyLnNldExvZ0xldmVsc0NvbmZpZyA9ICgpID0+IHsgfTtcbmdldExvZ2dlci53YWl0Rm9yQnVmZmVyID0gKCkgPT4geyB9O1xuZ2V0TG9nZ2VyLmNsZWFyTG9nZ2VyID0gKCkgPT4geyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9